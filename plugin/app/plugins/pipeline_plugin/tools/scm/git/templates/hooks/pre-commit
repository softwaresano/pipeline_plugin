#!/bin/bash
validator_dir=$(dirname "$0")/validators
cat .git/failed_hooks 2>/dev/null|xargs rm -vf
rm -vf .git/failed_hooks
rm -vf .git/target_hooks
rm -rvf .git/integrity_hooks
rm -rfv .git/tempdir/diffs
rm -vf .git/hooks.log
touch .git/failed_hooks
touch .git/target_hooks
mkdir -p .git/integrity_hooks

#shellcheck source=./plugin/app/plugins/pipeline_plugin/tools/scm/git/templates/hooks/validators/run_validator.sh
source "${validator_dir:?}"/run_validator.sh
n_errors=0
errors_files=''
run_validator " " "check_changes" || exit 1
while read -r file_name; do
  run_validator "$file_name" "encoding" && run_validator "$file_name" ""
done < <(git status --porcelain | grep -E --color=no '^AM |^ M |^M |^A '|awk '{$1=""; $0=$0; sub(/^ */, ""); print;}'|sort)

cat << EOF
===================================================================
===================================================================
Hooks summary:
$(cat .git/hooks.log)
EOF
if [[ "${n_errors}" != "0" ]]; then
  files_with_errors="$(echo -en "${errors_files}"|sort -u)"
  n_files_with_errors="$(echo -en "${files_with_errors:?}"|wc -l)"
  cat << EOF
== Files with hook errors: ${n_files_with_errors}
${files_with_errors}

EOF
if [[ -d target/logs/new_warmings.txt ]]; then
  cat target/logs/new_warmings.txt
  if [[ -d .git/tempdir/diffs ]]; then
    cat << EOF
== Review diffs file:

$(find .git/tempdir/diffs -type f -exec echo "  - {}" \;)

EOF
  fi
fi
cat << EOF
You can disable hook in a file using:
DISABLE_HOOK=<file> git commit ...
Ex: To disable hooks for ${error_file}.
DISABLE_HOOK='${error_file}' git commit ...
More info about hooks in: http://cdn-deploy-manager.cdn.hi.inet/cdn/repositories/current/docs/components/cdn-build/includes/git-hooks.adoc
EOF
fi
cat << EOF
===================================================================
===================================================================
EOF
[[ "${n_errors}" == "0" ]] && exit 0 || exit 1
